package data;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;

import helpers.Clock;

import static helpers.Artist.*;

import java.util.ArrayList;

public class Player {
	private TileGrid grid;
	private WaveManager waveManager;
	private ArrayList<Tower> towerList;
	private boolean leftMouseButtonDown, rightMouseButtonDown;

	public Player(TileGrid grid, WaveManager waveManager) {
		this.grid = grid;
		this.waveManager = waveManager;
		this.towerList = new ArrayList<Tower>();
		this.leftMouseButtonDown = false;
		this.rightMouseButtonDown = false;
	}
	
//	public void updateEnemyList(ArrayList<Enemy> newList){
//		for(TowerCannon t: towerList){
//			t.updateEnemyList(waveManager.getCurrentWave().getEnemyList());
//		}
//	}

	public void update() {

		for (Tower t : towerList) {
			t.update();
			t.draw();
			t.updateEnemyList(waveManager.getCurrentWave().getEnemyList());
		}

		// Handle Mouse Input
		if (Mouse.isButtonDown(0) && !leftMouseButtonDown) {
			towerList.add(new TowerBlue(TowerType.BlueTower,
					grid.getTile(Mouse.getX() / 64, (HEIGHT - Mouse.getY() - 1) / 64)
					,waveManager.getCurrentWave().getEnemyList()));

			// setTile();
		}
		
		if (Mouse.isButtonDown(1) && !rightMouseButtonDown) {
			towerList.add(new TowerIce(TowerType.IceTower,
					grid.getTile(Mouse.getX() / 64, (HEIGHT - Mouse.getY() - 1) / 64)
					,waveManager.getCurrentWave().getEnemyList()));

			// setTile();
		}

		leftMouseButtonDown = Mouse.isButtonDown(0);
		rightMouseButtonDown = Mouse.isButtonDown(1);

		// Handle KeyBoard input
		while (Keyboard.next()) {
			if (Keyboard.getEventKey() == Keyboard.KEY_RIGHT && Keyboard.getEventKeyState()) {

				Clock.changeMultiplier(0.2f);
			}

			if (Keyboard.getEventKey() == Keyboard.KEY_LEFT && Keyboard.getEventKeyState()) {
				Clock.changeMultiplier(-0.2f);
			}

//			if (Keyboard.getEventKey() == Keyboard.KEY_T && Keyboard.getEventKeyState()) {
////				towerList.add(new TowerCannon(quickLoad("tower"), grid.getTile(3, 8), 10,
////						1000,waveManager.getCurrentWave().getEnemyList()));
//			}
		}
	}

}
